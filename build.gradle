import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm'
    id "com.modrinth.minotaur" version "2.+"
    id 'net.darkhax.curseforgegradle' version '1.1.+'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = "${project.archives_base_name} ${project.minecraft_version}"
}


repositories {
    mavenCentral()
    maven {
        url "https://maven.nucleoid.xyz/"
        name "Nucleoid"
    }

    maven {url = "https://maven.architectury.dev/" }

    maven { url = 'https://jitpack.io' }
    maven {
        url ="https://maven.impactdev.net/repository/development/"
    }
    maven { url = uri("https://oss.sonatype.org/content/repositories/releases") }
    maven { url = uri("https://oss.sonatype.org/content/repositories/snapshots") }
    maven{
        url = "https://cursemaven.com"
    }
    maven {url = "https://maven.architectury.dev/" }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Adventure Platform and Discord Webhook
    modImplementation include("net.kyori:adventure-platform-fabric:5.14.1")

    modImplementation("net.fabricmc:fabric-language-kotlin:1.13.0+kotlin.2.1.0")

    // Adventure Text
    implementation "net.kyori:adventure-text-minimessage:4.17.0"
    implementation "net.kyori:adventure-text-serializer-gson:4.17.0"
    implementation "net.kyori:adventure-api:4.17.0"


    modImplementation 'me.lucko:fabric-permissions-api:0.3.1'
    // Placeholder API
    modImplementation include("eu.pb4:placeholder-api:${project.placeholder_api_version}")

    // Cobblemon
    modImplementation "com.cobblemon:fabric:1.6.1+1.21.1"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }

    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

tasks.register("updateJavaVersion") {
    doLast {
        def javaFile = file("D:\\Mods\\Cobble Scheduler\\src\\main\\java\\ca\\skynetcloud\\cobblescheduler\\CobbleScheduler.java") // Replace with actual file path

        if (javaFile.exists()) {
            println "Updating VERSION in ${javaFile.name}"

            def content = javaFile.text
            def updatedContent = content.replaceAll(
                    /private static final String VERSION = ".*";/,
                    "private static final String VERSION = \"${mod_version}\";"
            )

            // Write the updated content back to the file
            javaFile.text = updatedContent
        } else {
            println "Java file not found: ${javaFile.path}"
        }
    }
}

def changelogText = project.file('changelog.md').text
def site_debugMode = false

// CurseForge publishing task
tasks.register('publishCurseForge', TaskPublishCurseForge) {
    group = "publishing"

    apiToken = System.getenv("CURSEFORGE_TOKEN")

    def mainFile = upload('1203899', file("build/libs/${project.archives_base_name} ${project.minecraft_version}-${project.mod_version}.jar"))
    mainFile.displayName = "${project.archives_base_name}-${project.minecraft_version}-${mod_version}"
    mainFile.releaseType = 'beta'
    mainFile.changelog = changelogText
    mainFile.changelogType = "markdown"

    mainFile.addRequirement("fabric-api")

    mainFile.addRequirement("cobblemon")
    mainFile.addEnvironment("Server")
    mainFile.addGameVersion("1.21.1")
    mainFile.addJavaVersion("Java 21")
    debugMode = site_debugMode
}

// Modrinth publishing configuration
modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "cobblescheduler"
    versionNumber = "${project.archives_base_name}-${project.minecraft_version}-${mod_version}"
    versionType = "beta"
    uploadFile = file("build/libs/${project.archives_base_name} ${project.minecraft_version}-${project.mod_version}.jar")
    gameVersions = ["${project.minecraft_version}"] as Iterable<? extends String>
    loaders = ["fabric"]
    changelog = changelogText
    debugMode = site_debugMode

    dependencies {
        required.project "fabric-api"
        required.project "cobblemon"
    }
}

tasks.register('publicModdedSite') {
    dependsOn 'updateJavaVersion'
    dependsOn 'build'
    dependsOn 'publishCurseForge'
    dependsOn 'modrinth'
}

kotlin {
    jvmToolchain(21)
}
